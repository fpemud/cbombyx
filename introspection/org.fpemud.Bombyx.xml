<?xml version="1.0" encoding="UTF-8"?>
<node name="/org/fpemud/Bombyx">
  <!--
      org.fpemud.Bombyx:
      @short_description: Bombyx Network Manager

  -->
  <interface name="org.fpemud.Bombyx">
    <annotation name="org.gtk.GDBus.C.Name" value="Manager"/>

    <!--
        ActivateConnection:
        @connection: The connection to activate. If "/" is given, a valid device path must be given, and Bombyx picks the best connection to activate for the given device. VPN connections must always pass a valid connection path.
        @active_connection: The path of the active connection object representing this active connection.

        Activate a connection using the supplied device.
    -->
    <method name="ActivateConnection">
      <arg name="connection" type="o" direction="in"/>
      <arg name="active_connection" type="o" direction="out"/>
    </method>

    <!--
        DeactivateConnection:

        Deactivate the active connection.
    -->
    <method name="DeactivateConnection">
      <arg name="active_connection" type="o" direction="in"/>
    </method>

    <!--
        Sleep:
        @sleep: Indicates whether the Bombyx daemon should sleep or wake.

        Control the Bombyx daemon's sleep state. When asleep, all
        interfaces that it manages are deactivated. When awake, devices are
        available to be activated. This command should not be called directly by
        users or clients; it is intended for system suspend/resume tracking.
    -->
    <method name="Sleep">
      <arg name="sleep" type="b" direction="in"/>
    </method>

    <!--
        Enable:
        @enable: If FALSE, indicates that all networking should be disabled. If TRUE, indicates that Bombyx should begin managing network devices.

        Control whether overall networking is enabled or disabled. When disabled,
        all interfaces that NM manages are deactivated. When enabled, all managed
        interfaces are re-enabled and available to be activated. This command
        should be used by clients that provide to users the ability to
        enable/disable all networking.
    -->
    <method name="Enable">
      <arg name="enable" type="b" direction="in"/>
    </method>

    <!--
        GetPermissions:
        @permissions: Dictionary of available permissions and results. Each permission is represented by a name (ie "org.fpemud.Bombyx.Foobar") and each result is one of the following values: "yes" (the permission is available), "auth" (the permission is available after a successful authentication), or "no" (the permission is denied). Clients may use these values in the UI to indicate the ability to perform certain operations.

        Returns the permissions a caller has for various authenticated operations
        that Bombyx provides, like Enable/Disable networking, changing
        WiFi, WWAN, and WiMAX state, etc.
    -->
    <method name="GetPermissions">
      <arg name="permissions" type="a{ss}" direction="out"/>
    </method>

    <!--
        CheckPermissions:

        Emitted when system authorization details change, indicating that clients
        may wish to recheck permissions with GetPermissions.
    -->
    <signal name="CheckPermissions"/>

    <!--
        CheckConnectivity:
        @connectivity: (<link linkend="NMConnectivityState">NMConnectivityState</link>) The current connectivity state.

        Re-check the network connectivity state.
    -->
    <method name="CheckConnectivity">
      <arg name="connectivity" type="u" direction="out"/>
    </method>

    <!--
        state:
        @state: <link linkend="NMState">NMState</link>

        The overall networking state as determined by the Bombyx daemon,
        based on the state of network devices under its management.
    -->
    <method name="state">
      <arg name="state" type="u" direction="out"/>
    </method>

    <!--
        NetworkingEnabled:

        Indicates if overall networking is currently enabled or not. See the
        Enable() method.
    -->
    <property name="NetworkingEnabled" type="b" access="read"/>

    <!--
        WirelessEnabled:

        Indicates if wireless is currently enabled or not.
    -->
    <property name="WirelessEnabled" type="b" access="readwrite"/>

    <!--
        WirelessHardwareEnabled:

        Indicates if the wireless hardware is currently enabled, i.e. the state of
        the RF kill switch.
    -->
    <property name="WirelessHardwareEnabled" type="b" access="read"/>

    <!--
        WwanEnabled:

        Indicates if mobile broadband devices are currently enabled or not.
    -->
    <property name="WwanEnabled" type="b" access="readwrite"/>

    <!--
        WwanHardwareEnabled:

        Indicates if the mobile broadband hardware is currently enabled, i.e. the
        state of the RF kill switch.
    -->
    <property name="WwanHardwareEnabled" type="b" access="read"/>

    <!--
        WimaxEnabled:

        Indicates if WiMAX devices are currently enabled or not.
    -->
    <property name="WimaxEnabled" type="b" access="readwrite"/>

    <!--
        WimaxHardwareEnabled:

        Indicates if the WiMAX hardware is currently enabled, i.e. the state of
        the RF kill switch.
    -->
    <property name="WimaxHardwareEnabled" type="b" access="read"/>

    <!--
        ActiveConnections:

        List of active connection object paths.
    -->
    <property name="ActiveConnections" type="ao" access="read"/>

    <!--
        PrimaryConnection:

        The object path of the "primary" active connection being used to access
        the network. In particular, if there is no VPN active, or the VPN does not
        have the default route, then this indicates the connection that has the
        default route. If there is a VPN active with the default route, then this
        indicates the connection that contains the route to the VPN endpoint.
    -->
    <property name="PrimaryConnection" type="o" access="read"/>

    <!--
        PrimaryConnectionType:

        The connection type of the "primary" active connection being used to
        access the network. This is the same as the Type property on the object
        indicated by PrimaryConnection.
    -->
    <property name="PrimaryConnectionType" type="s" access="read"/>

    <!--
        ActivatingConnection:

        The object path of an active connection that is currently being activated
        and which is expected to become the new PrimaryConnection when it finishes
        activating.
    -->
    <property name="ActivatingConnection" type="o" access="read"/>

    <!--
        Startup:

        Indicates whether NM is still starting up; this becomes FALSE when NM has
        finished attempting to activate every connection that it might be able to
        activate at startup.
    -->
    <property name="Startup" type="b" access="read"/>

    <!--
        State:

        The overall state of the Bombyx daemon.

        This takes state of all active connections and the connectivity state into account
        to produce a single indicator of the network accessibility status.

        The graphical shells may use this property to provide network connection status
        indication and applications may use this to check if Internet connection is
        accessible. Shell that is able to cope with captive portals should use the
        "Connectivity" property to decide whether to present a captive portal authentication
        dialog.

        Returns: <link linkend="NMState">NMState</link>
    -->
    <property name="State" type="u" access="read"/>

    <!--
        StateChanged:
        @state: (<link linkend="NMState">NMState</link>) The new state of Bombyx.

        Bombyx's state changed.
    -->
    <signal name="StateChanged">
      <arg name="state" type="u"/>
    </signal>

    <!--
        Connectivity:

        The result of the last connectivity check. The connectivity check is triggered
        automatically when a default connection becomes available, periodically and by
        calling a CheckConnectivity() method.

        This property is in general useful for the graphical shell to determine whether
        the Internet access is being hijacked by an authentication gateway (a "captive
        portal"). In such case it would typically present a web browser window to give
        the user a chance to authenticate and call CheckConnectivity() when the user
        submits a form or dismisses the window.

        To determine the whether the user is able to access the Internet without dealing
        with captive portals (e.g. to provide a network connection indicator or disable
        controls that require Internet access), the "State" property is more suitable.

        Returns: <link linkend="NMConnectivityState">NMConnectivityState</link>
    -->
    <property name="Connectivity" type="u" access="read"/>

    <!--
        ConnectivityCheckAvailable:

        Indicates whether connectivity checking service has been
        configured.  This may return true even if the service is not
        currently enabled.

        This is primarily intended for use in a privacy control panel,
        as a way to determine whether to show an option to
        enable/disable the feature.
    -->
    <property name="ConnectivityCheckAvailable" type="b" access="read"/>

    <!--
        ConnectivityCheckEnabled:

        Indicates whether connectivity checking is enabled.  This
        property can also be written to to disable connectivity
        checking (as a privacy control panel might want to do).
    -->
    <property name="ConnectivityCheckEnabled" type="b" access="readwrite"/>

    <!--
        PropertiesChanged:
        @properties: The changed properties.

        DEPRECATED. Use the standard "PropertiesChanged" signal from "org.fpemud.DBus.Properties" instead which exists since version Bombyx 1.2.0.
    -->
    <signal name="PropertiesChanged">
      <arg name="properties" type="a{sv}"/>
    </signal>

  </interface>
</node>
