nm-dispatcher-api.h


#define NMD_CONNECTION_PROPS_PATH         "path"
#define NMD_CONNECTION_PROPS_FILENAME     "filename"
#define NMD_CONNECTION_PROPS_EXTERNAL     "external"

#define NMD_DEVICE_PROPS_INTERFACE        "interface"
#define NMD_DEVICE_PROPS_IP_INTERFACE     "ip-interface"
#define NMD_DEVICE_PROPS_TYPE             "type"
#define NMD_DEVICE_PROPS_STATE            "state"
#define NMD_DEVICE_PROPS_PATH             "path"

/* Actions */
#define NMD_ACTION_HOSTNAME     "hostname"
#define NMD_ACTION_PRE_UP       "pre-up"
#define NMD_ACTION_UP           "up"
#define NMD_ACTION_PRE_DOWN     "pre-down"
#define NMD_ACTION_DOWN         "down"
#define NMD_ACTION_VPN_PRE_UP   "vpn-pre-up"
#define NMD_ACTION_VPN_UP       "vpn-up"
#define NMD_ACTION_VPN_PRE_DOWN "vpn-pre-down"
#define NMD_ACTION_VPN_DOWN     "vpn-down"
#define NMD_ACTION_DHCP4_CHANGE "dhcp4-change"
#define NMD_ACTION_DHCP6_CHANGE "dhcp6-change"
#define NMD_ACTION_CONNECTIVITY_CHANGE "connectivity-change"



dispatcher



typedef enum {
	NM_DISPATCHER_ACTION_HOSTNAME,
	NM_DISPATCHER_ACTION_PRE_UP,
	NM_DISPATCHER_ACTION_UP,
	NM_DISPATCHER_ACTION_PRE_DOWN,
	NM_DISPATCHER_ACTION_DOWN,
	NM_DISPATCHER_ACTION_VPN_PRE_UP,
	NM_DISPATCHER_ACTION_VPN_UP,
	NM_DISPATCHER_ACTION_VPN_PRE_DOWN,
	NM_DISPATCHER_ACTION_VPN_DOWN,
	NM_DISPATCHER_ACTION_DHCP4_CHANGE,
	NM_DISPATCHER_ACTION_DHCP6_CHANGE,
	NM_DISPATCHER_ACTION_CONNECTIVITY_CHANGE
} NMDispatcherAction;

gboolean nm_dispatcher_call_hostname (NMDispatcherFunc callback,
                                      gpointer user_data,
                                      guint *out_call_id);

gboolean nm_dispatcher_call_device (NMDispatcherAction action,
                                    NMDevice *device,
                                    NMActRequest *act_request,
                                    NMDispatcherFunc callback,
                                    gpointer user_data,
                                    guint *out_call_id);

gboolean nm_dispatcher_call_device_sync (NMDispatcherAction action,
                                         NMDevice *device,
                                         NMActRequest *act_request);

gboolean nm_dispatcher_call_vpn (NMDispatcherAction action,
                                 NMSettingsConnection *settings_connection,
                                 NMConnection *applied_connection,
                                 NMDevice *parent_device,
                                 const char *vpn_iface,
                                 NMProxyConfig *vpn_proxy_config,
                                 NMIP4Config *vpn_ip4_config,
                                 NMIP6Config *vpn_ip6_config,
                                 NMDispatcherFunc callback,
                                 gpointer user_data,
                                 guint *out_call_id);

gboolean nm_dispatcher_call_vpn_sync (NMDispatcherAction action,
                                      NMSettingsConnection *settings_connection,
                                      NMConnection *applied_connection,
                                      NMDevice *parent_device,
                                      const char *vpn_iface,
                                      NMProxyConfig *vpn_proxy_config,
                                      NMIP4Config *vpn_ip4_config,
                                      NMIP6Config *vpn_ip6_config);

gboolean nm_dispatcher_call_connectivity (NMConnectivityState state,
                                          NMDispatcherFunc callback,
                                          gpointer user_data,
                                          guint *out_call_id);

void nm_dispatcher_call_cancel (guint call_id);



nm_dnsmasq_
dnsmasq_manager
dnsmasq_state_id
dnsmasq_
nm_dhcp_client_
systemd
vpn